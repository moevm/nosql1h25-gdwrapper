"""
Django settings for gdwrapper project.

Generated by 'django-admin startproject' using Django 3.2.12.
For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import urllib.parse
from pathlib import Path
from os.path import join as path_join
from dotenv import dotenv_values

BASE_DIR = Path(__file__).resolve().parent

# Загружаем переменные окружения из файла .env (на уровне выше BASE_DIR)
config = dotenv_values(path_join(BASE_DIR.parent, ".env"))

SECRET_KEY = config.get("DJANGO_SECRET_KEY")
ALLOWED_HOSTS = ['localhost', '0.0.0.0']
DEBUG = True

# Получаем переменные подключения к MongoDB
DB_NAME = config.get("DB_NAME")
DB_USER = config.get("DB_USER")
DB_PASSWORD = config.get("DB_PASSWORD")
DATABASE_HOST = config.get("DATABASE_HOST", "mongo_db")
DATABASE_PORT = config.get("DATABASE_PORT", "27017")

# Экранируем пароль для корректного формирования URI
DB_PASSWORD_ENCODED = urllib.parse.quote_plus(DB_PASSWORD)


# Формируем строку подключения к MongoDB с указанием authSource=admin
MONGO_URI = f"mongodb://{DB_USER}:{DB_PASSWORD_ENCODED}@{DATABASE_HOST}:{DATABASE_PORT}/{DB_NAME}?authSource=admin"

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'CLIENT': {
            'host': MONGO_URI,
        }
    }
}


# Google Drive API settings
GD_CREDENTIALS_PATH = path_join(BASE_DIR.parent, "credentials.json")
GD_TOKEN_PATH = path_join(BASE_DIR.parent, "token.json")
GD_SCOPES = ["https://www.googleapis.com/auth/drive.metadata.readonly"]
GD_FIELDS = [
            'mimeType',
            'size',
            'permissions',
            'id',
            'name',
            'createdTime',
            'modifiedTime',
            'capabilities',
            'parents'
          ]
GD_AUTH_CALLBACK_URL = 'http://localhost:8000/testauth'


# Остальные настройки (INSTALLED_APPS, MIDDLEWARE, TEMPLATES, WSGI_APPLICATION и т.д.)
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / '../static']

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gdwrapper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / '../templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gdwrapper.wsgi.application'

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

STATIC_URL = '/static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
